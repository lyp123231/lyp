#define BLINKER_WIFI
#define BLINKER_MIOT_LIGHT

#include <Blinker.h>
#include <Servo.h>

Servo myservo;//定义舵机

char auth[] = "d7d316702789";//根据需要自行修改
char ssid[] = "mi";
char pswd[] = "1552253723";
// defines pins numbers
const int trigPin = 2;  //D4
const int echoPin = 0;  //D3

// defines variables
long duration;
int distance;
// 新建组件对象
BlinkerButton Button1("test1");
BlinkerButton Button2("test2");

int counter = 0;

void miotPowerState(const String & state)//电源类操作
{
    BLINKER_LOG("need set power state: ", state);

    if (state == BLINKER_CMD_ON) {
        
        myservo.write(15);//收到“on”的指令后舵机旋转140度
        BlinkerMIOT.powerState("on");
        BlinkerMIOT.print();//反馈状态
        delay(1000);//延时两秒
        myservo.write(90);//舵机归零，回到垂直状态
         
        
    }
    else if (state == BLINKER_CMD_OFF) {
      
         myservo.write(145);
         BlinkerMIOT.powerState("off");
         BlinkerMIOT.print();
         delay(1000);
         myservo.write(90);
         
      
    }
}

// 按下按键即会执行该函数
void button1_callback(const String & state)
{
    BLINKER_LOG("get button state: ", state);
    if (state=="on") 
    {
        myservo.write(15);//收到“on”的指令后舵机旋转140
        delay(1000);//延时
        myservo.write(90);//舵机归零垂直
         
        
    }
    //else if(state=="press")
    //{
    //   myservo.write(70);//长按开关按键后舵机旋转140
     //  delay(2000);//延时
    //   myservo.write(90);//舵机归零垂直
    //}
        
}
void button2_callback(const String & state)
{
    BLINKER_LOG("get button state: ", state);
    if (state=="on") 
    {
        myservo.write(145);//收到“on”的指令后舵机旋转140
        delay(1000);//延时
        myservo.write(90);//舵机归零垂直
         
        
    }
        
}
// 如果未绑定的组件被触发，则会执行其中内容
void dataRead(const String & data)
{
    BLINKER_LOG("Blinker readString: ", data);
    counter++;
 
}

void setup()
{
    // 初始化串口
pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
pinMode(echoPin, INPUT);
    Serial.begin(115200);
    BLINKER_DEBUG.stream(Serial);
    // 初始化舵机
    myservo.attach(12);//舵机的IO口，nodemcu的D6口
    myservo.write(90);//上电时舵机归零垂直
  BlinkerMIOT.attachPowerState(miotPowerState);
  
    // 初始化blinker
    Blinker.begin(auth, ssid, pswd);
    Blinker.attachData(dataRead);

    Button1.attach(button1_callback);
    Button2.attach(button2_callback);
}

void loop() {
  // Clears the trigPin
digitalWrite(trigPin, LOW);
delayMicroseconds(2);

// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin, HIGH);
delayMicroseconds(10
);
digitalWrite(trigPin, LOW);

// Reads the echoPin, returns the sound wave travel time in microseconds
duration = pulseIn(echoPin, HIGH);

// Calculating the distance
distance= duration*0.034/2;
// Prints the distance on the Serial Monitor
Serial.print("Distance: ");
Serial.println(distance);

if(distance<10)
{myservo.write(145);//收到“on”的指令后舵机旋转140
 delay(1000);//延时
 myservo.write(90);
}else if(distance>10&&distance<50)
{  myservo.write(15);//收到“on”的指令后舵机旋转140
   delay(1000);//延时
   myservo.write(90);//舵机归零垂直
}
delay(500);
Blinker.run();
}
